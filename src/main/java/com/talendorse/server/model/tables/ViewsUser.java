/*
 * This file is generated by jOOQ.
 */
package com.talendorse.server.model.tables;


import com.talendorse.server.model.Database;
import com.talendorse.server.model.Indexes;
import com.talendorse.server.model.Keys;
import com.talendorse.server.model.tables.records.ViewsUserRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewsUser extends TableImpl<ViewsUserRecord> {

    private static final long serialVersionUID = -1497138464;

    /**
     * The reference instance of <code>database.views_user</code>
     */
    public static final ViewsUser VIEWS_USER = new ViewsUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewsUserRecord> getRecordType() {
        return ViewsUserRecord.class;
    }

    /**
     * The column <code>database.views_user.id_views_user</code>.
     */
    public final TableField<ViewsUserRecord, Integer> ID_VIEWS_USER = createField("id_views_user", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>database.views_user.id_user</code>.
     */
    public final TableField<ViewsUserRecord, Integer> ID_USER = createField("id_user", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>database.views_user.id_offer</code>.
     */
    public final TableField<ViewsUserRecord, Integer> ID_OFFER = createField("id_offer", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>database.views_user.id_company</code>.
     */
    public final TableField<ViewsUserRecord, Integer> ID_COMPANY = createField("id_company", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>database.views_user</code> table reference
     */
    public ViewsUser() {
        this(DSL.name("views_user"), null);
    }

    /**
     * Create an aliased <code>database.views_user</code> table reference
     */
    public ViewsUser(String alias) {
        this(DSL.name(alias), VIEWS_USER);
    }

    /**
     * Create an aliased <code>database.views_user</code> table reference
     */
    public ViewsUser(Name alias) {
        this(alias, VIEWS_USER);
    }

    private ViewsUser(Name alias, Table<ViewsUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewsUser(Name alias, Table<ViewsUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ViewsUser(Table<O> child, ForeignKey<O, ViewsUserRecord> key) {
        super(child, key, VIEWS_USER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Database.DATABASE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.VIEWS_USER_FK_VIEWS_COMPANY_IDX, Indexes.VIEWS_USER_FK_VIEWS_OFFER_IDX, Indexes.VIEWS_USER_FK_VIEWS_USER_IDX, Indexes.VIEWS_USER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ViewsUserRecord, Integer> getIdentity() {
        return Keys.IDENTITY_VIEWS_USER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ViewsUserRecord> getPrimaryKey() {
        return Keys.KEY_VIEWS_USER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ViewsUserRecord>> getKeys() {
        return Arrays.<UniqueKey<ViewsUserRecord>>asList(Keys.KEY_VIEWS_USER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ViewsUserRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ViewsUserRecord, ?>>asList(Keys.FK_VIEWS_USER, Keys.FK_VIEWS_OFFER, Keys.FK_VIEWS_COMPANY);
    }

    public Users users() {
        return new Users(this, Keys.FK_VIEWS_USER);
    }

    public Offers offers() {
        return new Offers(this, Keys.FK_VIEWS_OFFER);
    }

    public Companies companies() {
        return new Companies(this, Keys.FK_VIEWS_COMPANY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ViewsUser as(String alias) {
        return new ViewsUser(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ViewsUser as(Name alias) {
        return new ViewsUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewsUser rename(String name) {
        return new ViewsUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewsUser rename(Name name) {
        return new ViewsUser(name, null);
    }
}
