/*
 * This file is generated by jOOQ.
 */
package com.talendorse.server.model.tables;


import com.talendorse.server.model.Database;
import com.talendorse.server.model.Indexes;
import com.talendorse.server.model.Keys;
import com.talendorse.server.model.tables.records.EducationRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Education extends TableImpl<EducationRecord> {

    private static final long serialVersionUID = -207745284;

    /**
     * The reference instance of <code>database.education</code>
     */
    public static final Education EDUCATION = new Education();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EducationRecord> getRecordType() {
        return EducationRecord.class;
    }

    /**
     * The column <code>database.education.id_education</code>.
     */
    public final TableField<EducationRecord, Integer> ID_EDUCATION = createField("id_education", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>database.education.id_user</code>.
     */
    public final TableField<EducationRecord, Integer> ID_USER = createField("id_user", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>database.education.school-name</code>.
     */
    public final TableField<EducationRecord, String> SCHOOL_NAME = createField("school-name", org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>database.education.start-date</code>.
     */
    public final TableField<EducationRecord, Timestamp> START_DATE = createField("start-date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>database.education.end-date</code>.
     */
    public final TableField<EducationRecord, Timestamp> END_DATE = createField("end-date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>database.education.degreee</code>.
     */
    public final TableField<EducationRecord, String> DEGREEE = createField("degreee", org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>database.education.activities</code>.
     */
    public final TableField<EducationRecord, String> ACTIVITIES = createField("activities", org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>database.education.notes</code>.
     */
    public final TableField<EducationRecord, String> NOTES = createField("notes", org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>database.education.date_created</code>.
     */
    public final TableField<EducationRecord, Timestamp> DATE_CREATED = createField("date_created", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>database.education</code> table reference
     */
    public Education() {
        this(DSL.name("education"), null);
    }

    /**
     * Create an aliased <code>database.education</code> table reference
     */
    public Education(String alias) {
        this(DSL.name(alias), EDUCATION);
    }

    /**
     * Create an aliased <code>database.education</code> table reference
     */
    public Education(Name alias) {
        this(alias, EDUCATION);
    }

    private Education(Name alias, Table<EducationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Education(Name alias, Table<EducationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Education(Table<O> child, ForeignKey<O, EducationRecord> key) {
        super(child, key, EDUCATION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Database.DATABASE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EDUCATION_FK_USER_ID_IDX, Indexes.EDUCATION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<EducationRecord, Integer> getIdentity() {
        return Keys.IDENTITY_EDUCATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<EducationRecord> getPrimaryKey() {
        return Keys.KEY_EDUCATION_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<EducationRecord>> getKeys() {
        return Arrays.<UniqueKey<EducationRecord>>asList(Keys.KEY_EDUCATION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<EducationRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EducationRecord, ?>>asList(Keys.FK_USER_ID);
    }

    public Users users() {
        return new Users(this, Keys.FK_USER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Education as(String alias) {
        return new Education(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Education as(Name alias) {
        return new Education(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Education rename(String name) {
        return new Education(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Education rename(Name name) {
        return new Education(name, null);
    }
}
