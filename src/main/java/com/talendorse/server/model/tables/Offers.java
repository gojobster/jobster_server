/*
 * This file is generated by jOOQ.
 */
package com.talendorse.server.model.tables;


import com.talendorse.server.model.Database;
import com.talendorse.server.model.Indexes;
import com.talendorse.server.model.Keys;
import com.talendorse.server.model.tables.records.OffersRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Offers extends TableImpl<OffersRecord> {

    private static final long serialVersionUID = 723043867;

    /**
     * The reference instance of <code>database.offers</code>
     */
    public static final Offers OFFERS = new Offers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OffersRecord> getRecordType() {
        return OffersRecord.class;
    }

    /**
     * The column <code>database.offers.id_offer</code>.
     */
    public final TableField<OffersRecord, Integer> ID_OFFER = createField("id_offer", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>database.offers.id_company</code>.
     */
    public final TableField<OffersRecord, Integer> ID_COMPANY = createField("id_company", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>database.offers.position</code>.
     */
    public final TableField<OffersRecord, String> POSITION = createField("position", org.jooq.impl.SQLDataType.VARCHAR(120).nullable(false), this, "");

    /**
     * The column <code>database.offers.summary</code>.
     */
    public final TableField<OffersRecord, String> SUMMARY = createField("summary", org.jooq.impl.SQLDataType.VARCHAR(11844), this, "");

    /**
     * The column <code>database.offers.experience</code>.
     */
    public final TableField<OffersRecord, Integer> EXPERIENCE = createField("experience", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>database.offers.job_functions</code>.
     */
    public final TableField<OffersRecord, String> JOB_FUNCTIONS = createField("job_functions", org.jooq.impl.SQLDataType.VARCHAR(120), this, "");

    /**
     * The column <code>database.offers.city</code>.
     */
    public final TableField<OffersRecord, String> CITY = createField("city", org.jooq.impl.SQLDataType.VARCHAR(80), this, "");

    /**
     * The column <code>database.offers.country</code>.
     */
    public final TableField<OffersRecord, String> COUNTRY = createField("country", org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>database.offers.people_in_charge</code>.
     */
    public final TableField<OffersRecord, Integer> PEOPLE_IN_CHARGE = createField("people_in_charge", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>database.offers.tipo_jornada</code>. Tipo de oferta: temporal, media jornada, jornada completa
Tipo de jornada:
1 -  por horas             
2 -  media jornada      
3 -  jornada completa 
     */
    public final TableField<OffersRecord, Integer> TIPO_JORNADA = createField("tipo_jornada", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "Tipo de oferta: temporal, media jornada, jornada completa\nTipo de jornada:\n1 -  por horas             \n2 -  media jornada      \n3 -  jornada completa ");

    /**
     * The column <code>database.offers.tipo_contrato</code>. Tipo de contrato:
 - tiempo parcial      1
 - tiempo indefinido 2
     */
    public final TableField<OffersRecord, Integer> TIPO_CONTRATO = createField("tipo_contrato", org.jooq.impl.SQLDataType.INTEGER, this, "Tipo de contrato:\n - tiempo parcial      1\n - tiempo indefinido 2");

    /**
     * The column <code>database.offers.hours</code>.
     */
    public final TableField<OffersRecord, Integer> HOURS = createField("hours", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>database.offers.salary_min</code>.
     */
    public final TableField<OffersRecord, Integer> SALARY_MIN = createField("salary_min", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>database.offers.salary_max</code>.
     */
    public final TableField<OffersRecord, Integer> SALARY_MAX = createField("salary_max", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>database.offers.reward</code>.
     */
    public final TableField<OffersRecord, Integer> REWARD = createField("reward", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1000", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>database.offers.priority</code>.
     */
    public final TableField<OffersRecord, Integer> PRIORITY = createField("priority", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>database.offers.state</code>. 0 -&gt; Inactiva
1 -&gt; Activa
2 -&gt; Finalizada
     */
    public final TableField<OffersRecord, Integer> STATE = createField("state", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "0 -> Inactiva\n1 -> Activa\n2 -> Finalizada");

    /**
     * The column <code>database.offers.date_init</code>.
     */
    public final TableField<OffersRecord, Timestamp> DATE_INIT = createField("date_init", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>database.offers.date_created</code>.
     */
    public final TableField<OffersRecord, Timestamp> DATE_CREATED = createField("date_created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>database.offers.date_end</code>.
     */
    public final TableField<OffersRecord, Timestamp> DATE_END = createField("date_end", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>database.offers</code> table reference
     */
    public Offers() {
        this(DSL.name("offers"), null);
    }

    /**
     * Create an aliased <code>database.offers</code> table reference
     */
    public Offers(String alias) {
        this(DSL.name(alias), OFFERS);
    }

    /**
     * Create an aliased <code>database.offers</code> table reference
     */
    public Offers(Name alias) {
        this(alias, OFFERS);
    }

    private Offers(Name alias, Table<OffersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Offers(Name alias, Table<OffersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Offers(Table<O> child, ForeignKey<O, OffersRecord> key) {
        super(child, key, OFFERS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Database.DATABASE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.OFFERS_FK_OFFER_COMPANY_IDX, Indexes.OFFERS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<OffersRecord, Integer> getIdentity() {
        return Keys.IDENTITY_OFFERS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OffersRecord> getPrimaryKey() {
        return Keys.KEY_OFFERS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OffersRecord>> getKeys() {
        return Arrays.<UniqueKey<OffersRecord>>asList(Keys.KEY_OFFERS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<OffersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OffersRecord, ?>>asList(Keys.FK_OFFER_COMPANY);
    }

    public Companies companies() {
        return new Companies(this, Keys.FK_OFFER_COMPANY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Offers as(String alias) {
        return new Offers(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Offers as(Name alias) {
        return new Offers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Offers rename(String name) {
        return new Offers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Offers rename(Name name) {
        return new Offers(name, null);
    }
}
