/*
 * This file is generated by jOOQ.
 */
package com.jobster.server.model.tables;


import com.jobster.server.model.Indexes;
import com.jobster.server.model.Jobster;
import com.jobster.server.model.Keys;
import com.jobster.server.model.tables.records.OffersRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Offers extends TableImpl<OffersRecord> {

    private static final long serialVersionUID = -595509699;

    /**
     * The reference instance of <code>jobster.offers</code>
     */
    public static final Offers OFFERS = new Offers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OffersRecord> getRecordType() {
        return OffersRecord.class;
    }

    /**
     * The column <code>jobster.offers.id_offer</code>.
     */
    public final TableField<OffersRecord, Integer> ID_OFFER = createField("id_offer", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>jobster.offers.position</code>.
     */
    public final TableField<OffersRecord, String> POSITION = createField("position", org.jooq.impl.SQLDataType.VARCHAR(120).nullable(false), this, "");

    /**
     * The column <code>jobster.offers.summary</code>.
     */
    public final TableField<OffersRecord, String> SUMMARY = createField("summary", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>jobster.offers.experience</code>.
     */
    public final TableField<OffersRecord, String> EXPERIENCE = createField("experience", org.jooq.impl.SQLDataType.VARCHAR(120), this, "");

    /**
     * The column <code>jobster.offers.job_functions</code>.
     */
    public final TableField<OffersRecord, String> JOB_FUNCTIONS = createField("job_functions", org.jooq.impl.SQLDataType.VARCHAR(120), this, "");

    /**
     * The column <code>jobster.offers.date_init</code>.
     */
    public final TableField<OffersRecord, Timestamp> DATE_INIT = createField("date_init", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>jobster.offers.date_end</code>.
     */
    public final TableField<OffersRecord, Timestamp> DATE_END = createField("date_end", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>jobster.offers.date_created</code>.
     */
    public final TableField<OffersRecord, Timestamp> DATE_CREATED = createField("date_created", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>jobster.offers.city</code>.
     */
    public final TableField<OffersRecord, String> CITY = createField("city", org.jooq.impl.SQLDataType.VARCHAR(80), this, "");

    /**
     * Create a <code>jobster.offers</code> table reference
     */
    public Offers() {
        this(DSL.name("offers"), null);
    }

    /**
     * Create an aliased <code>jobster.offers</code> table reference
     */
    public Offers(String alias) {
        this(DSL.name(alias), OFFERS);
    }

    /**
     * Create an aliased <code>jobster.offers</code> table reference
     */
    public Offers(Name alias) {
        this(alias, OFFERS);
    }

    private Offers(Name alias, Table<OffersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Offers(Name alias, Table<OffersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Offers(Table<O> child, ForeignKey<O, OffersRecord> key) {
        super(child, key, OFFERS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Jobster.JOBSTER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.OFFERS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<OffersRecord, Integer> getIdentity() {
        return Keys.IDENTITY_OFFERS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OffersRecord> getPrimaryKey() {
        return Keys.KEY_OFFERS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OffersRecord>> getKeys() {
        return Arrays.<UniqueKey<OffersRecord>>asList(Keys.KEY_OFFERS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Offers as(String alias) {
        return new Offers(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Offers as(Name alias) {
        return new Offers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Offers rename(String name) {
        return new Offers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Offers rename(Name name) {
        return new Offers(name, null);
    }
}
